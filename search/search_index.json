{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 General Values General Guidelines Handbook Usage Communication Objectives and Key Results (OKRs)","title":"Home"},{"location":"#home","text":"General Values General Guidelines Handbook Usage Communication Objectives and Key Results (OKRs)","title":"Home"},{"location":"en/general/communication/","text":"Communication \u00b6 Introduction \u00b6 We're a distributed, all-remote company where people work remotely without missing out. For this, we use asynchronous communication and are as open as we can be by communicating through public issues, chat channels, and placing an emphasis on ensuring that conclusions of offline conversations are written down. These communication guidelines are meant to facilitate smooth communication in an ever-growing, all-remote company. Everything starts with an issue \u00b6 Always create an issue for things you work on. If it is worth spending time on, it is worth creating an issue since that enables other people to learn and help. You can always edit the description or close it when the problem changed to something different or was solved. If a user suggests an enhancement, try and find an existing issue that addresses their concern, or create a new one. Ask if they'd like to elaborate on their idea in one of these issues. Double link issues with related conversations. E.g. if there\u2019s a Jira ticket that causes you to open a GitLab issue, make sure to document the issue link in the Jira ticket and vice versa. And when closing the issue, include reason or response from Jira. Another example is to add \"Report: \" lines to the issue description with links to relevant issues and feature requests. When done add a comment to relevant issues (and close them if you are responsible for reporting back, or re-assign if you are not). This prevents internal confusion and us failing to report back to the reporters. If two issues are related, crosslink them (a link from each issue to the other one). Put the link at the top of each issue's description with a short mention of the relationship (Report, etc.). If there are more than 2 issues, use one issue as the central one and crosslink all issues to this one. Please, also crosslink between Jira and GitLab issues. After a discussion about a feature update the issue description with the consensus or final conclusions. This makes it much easier to see the current state of an issue for everyone involved in the implementation and prevents confusion and discussion later on. Submit the smallest item of work that makes sense. When creating an issue describe the smallest fix possible, put suggestions for enhancements in separate issues and link them. If you're new to MyCompany and are writing documentation or instructions, submit your first merge request for at most 20 lines. Do not leave issues open for a long time, issues should be actionable and realistic. If you are assigned to an issue but don't have time to work on it, assign it to someone else. Make a conscious effort to prioritize your work. The priority of items depends on multiple factors: Is there a team member waiting for the answer? What is the impact if you delay it? How many people does it affect, etc.? Pick issues from the current milestone. We try not to assign issues to people but to have people pick issues in a milestone themselves. Assign an issue to yourself as soon as you start to work on it, but not before that time. If you complete part of an issue and need someone else to take the next step, re-assign the issue to that person. When re-assigning an issue, make sure that the issue description contains the latest information. The issue description should be the single source of truth . When working on an issue, ask for feedback from your peers. For example, if you're a designer and you propose a design, ping a fellow designer to review your work. If they approve, you can move it to the next step. If they suggest changes, you get the opportunity to improve your design. This promotes collaboration and advances everyone's skills. We keep our promises and do not make external promises without internal agreement. Do not close an issue until it is done . When closing an issue leave a comment explaining why you are closing the issue. Implement it with a merge request \u00b6 Even when something is not done, share it internally so people can comment early and prevent rework. Create a Work In Progress merge request so it is not merged by accident. If any followup actions are required on the issue after the merge request is merged (like reporting back to any customers or writing documentation), avoid auto closing it. When you are done with your merge request, remove the \"WIP\" prefix. You can still make changes based on feedback of course, but by removing the \"WIP\" prefix it clarifies that the main body of work has been completed. Internal Communication \u00b6 All written communication happens in English or French, even when sent one on one, because sometimes you need to forward an email or chat. Use asynchronous communication when possible (issues and email instead of chat). Issues are preferred over email, email is preferred over chat and people should be able to do their work without getting interrupted by chat . To use email instead of chat it is OK to send an internal email that contains only a short message, similar as you would use in chat. Save time by not including a salutation like 'Hi Emma,' and first write the subject of the email which you copy and paste into the body. You are not expected to be available all the time. It is perfectly fine not to respond to emails and chat mentions until your planned work hours. Sometimes synchronous communication is the better option, but do not default to it. For example, a video call can clear things up quickly when you are blocked. It is very OK to ask as many questions as you have, but ask them so many people can answer them and many people see the answer (so use issues or public chat channels instead of private messages or one-on-one emails) and make sure you document the answers. If you mention something (a merge request, issue, commit, webpage, comment, etc.) please include a link to it. All company data should be shareable by default. Don't use a local text file but rather leave comments on an issue. When someone asks something give back a deadline or that you did it. Answers like: 'will do', 'OK', 'it is on my todo list' are not helpful. If it is small is better to spend 2 minutes and do the tasks so the other person can mentally forget about it. If it is large you need to figure out when you'll do it, by returning that information the other person might decide to solve it in another way if it takes too long. Avoid as far as possible to use acronyms or code name, \u00ab Explicit is better than implicit \u00bb . Read why it: Acronyms Seriously Suck - Elon Musk Email \u00b6 Send one email per subject as multiple items in one email will cause delays (have to respond to everything) or misses (forgot one of the items). Always reply to emails by replying to all, even when no action is needed. This lets the other person know that you received it. A thread is done when there is a single word reply, such as OK, thanks, or done. If you forward an email without other comments please add FYI (for your information), FYA (for your action), or FYJ (for your judgment). If you forward an external request with FYJ it just means the person who forwarded it will not follow up on the request and expects you to decide if you should follow up or not. Emails are asynchronous, for example, if your manager emails you on a weekend it is fine to reply during the workweek. If an email is or has become urgent feel free to ping people via chat referencing the subject of the email. Chat \u00b6 If you use chat, please use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed. If you use chat and plan to message 3 or more people, we recommend to create a chat channel for customer/issue/project/problem/partnership. If you're only referring to someone, but don't actually need their attention, and want to spare them from getting notified, spell out their name normally without @ mentioning them. If the subject is of value to the wider community, consider commenting on an existing issue or opening a new issue instead. Despite the instantaneous nature of chat, it should be considered asynchronous communication. Don't expect an instantaneous response; you have no idea what the other person is doing. If you must send a private message, don't start a conversation with \"Hi\" or \"Hey\" as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g. \"I'm having trouble understanding issue #x, can we talk about it quickly?\". Unless you're in an active chat, don't break up a topic into multiple messages as each one will result in a notification which can be disruptive. Use threads if you want to provide extra info to the question/comment you posted. Especially in channels like #questions are threads very valuable to keep conversations about a certain question together. Because we work globally, you may receive chat mentions at any time of day. Please consider enabling Slack's Do not disturb functionality so you don't get interrupted, for example, in your evenings. Do not feel obligated to respond to chat messages when you are not working. Feel free to send a colleague a link to these guidelines if the communication in Slack should be done asynchronously . If you are having a hard time keeping up with chat messages, you can update your preferences to have Slack email you all notifications. To change the setting, go to Preferences > Notifications > When I'm not active on desktop... and \"send me email notifications\". Please avoid using @here unless this is about something urgent and important. In chat try to keep the use of keywords that mention the whole channel to a minimum. They should only be used for pings that are both urgent and important, not just important. By overusing channel mentions you make it harder to respond to personal mentions in a timely manner since people get pinged too frequently. If something is urgent and important: Use @here to notify all currently active members in the room. Please only us @here if the message is important and urgent. Use @channel to notify ALL members in the room, irrespective of away status. If something is important but not urgent - like complimenting or encouraging the entire team - use email or post in the channel without @ -mentioning the team. If you agree in a chat to start a video call (typically by asking \"Call?\") the person that didn't leave the last comment starts the call. So either respond to the \"Call?\" request with a video link or say \"Yes\" and let the other person start it. Don't say \"Yes\" and start a call 5 seconds later since it is likely you'll both be creating a video call link at the same time. If you are aware that your teammate is on vacation, avoid mentioning them in a high volume channel. It will be difficult to find the information or question when they return. If you need to ensure they refer back to the thread, ensure to send them a link to the relevant Slack message through a direct message. It's not rude to leave a channel. When you're no longer interested in the conversations happening in a channel, feel free to leave it so it won't distract you anymore. Say Thanks \u00b6 Thank people that did a great job in our \"Thanks\" chat channel. If someone is a team member just @ mention them. If multiple people were working on something try mentioning each person by \"@name\". \"Thanks everyone\" does not say much. To thank someone who is not a team member, mention your manager, our People Ops Coordinator, the name of the person, a quirky gift and link to their work. For example, \"@manager, @peopleopscoordinator: Joe deserves a lawnmower for link \". With your manager's blessing, the People Ops Coordinator will approach the person in question for their address saying we want to send some swag. We'll ship it in gift wrap with \"Thanks for your great work on link , love from @gitlab\". Don't thank the CEO or other executives for something that the company paid for, thank MyCompany instead. Situation-Complication-Implication-Position-Action-Benefit (SCIPAB) \u00b6 When you only have a few minutes to present your case or grab your listeners attention, this six-step process can help you communicate better and faster. Situation - Expresses the current state for discussion Complication - Summarzies the critical issues, challenges or opportunities Implication - Provides insight into the consequences that will be a result of if the Complications are not addressed. Position - Notes the presenter's opinion on the necessary changes which should be made. Action - Defines the expectations of the target audience/listeners. Benefit - Clearly concludes how the Position and Action sections will address the Complications. This method can be used in presentations, emails and everyday conversations. Example - The Management team asking for time to resolve a problem S - The failure rate last year for product X1 was an acceptable 1.5%. C - Because of supply shortages in the current fiscal year we are forced to change the material of a key component. I - Unfortunately, that resulted in the failure rate doubling this year. P - It is critical we address this problem immediately. A - Please approve the team 5 days to investigate the specific causes of the increase and establish the necessary next steps. B - By doing this we will redue the failure rate to an acceptabel level and develop guidelines for preventing such problems in the future. More information can be found at SCIPAB- Six Steps To Reach Your Audience","title":"Communication"},{"location":"en/general/communication/#communication","text":"","title":"Communication"},{"location":"en/general/communication/#introduction","text":"We're a distributed, all-remote company where people work remotely without missing out. For this, we use asynchronous communication and are as open as we can be by communicating through public issues, chat channels, and placing an emphasis on ensuring that conclusions of offline conversations are written down. These communication guidelines are meant to facilitate smooth communication in an ever-growing, all-remote company.","title":"Introduction"},{"location":"en/general/communication/#everything-starts-with-an-issue","text":"Always create an issue for things you work on. If it is worth spending time on, it is worth creating an issue since that enables other people to learn and help. You can always edit the description or close it when the problem changed to something different or was solved. If a user suggests an enhancement, try and find an existing issue that addresses their concern, or create a new one. Ask if they'd like to elaborate on their idea in one of these issues. Double link issues with related conversations. E.g. if there\u2019s a Jira ticket that causes you to open a GitLab issue, make sure to document the issue link in the Jira ticket and vice versa. And when closing the issue, include reason or response from Jira. Another example is to add \"Report: \" lines to the issue description with links to relevant issues and feature requests. When done add a comment to relevant issues (and close them if you are responsible for reporting back, or re-assign if you are not). This prevents internal confusion and us failing to report back to the reporters. If two issues are related, crosslink them (a link from each issue to the other one). Put the link at the top of each issue's description with a short mention of the relationship (Report, etc.). If there are more than 2 issues, use one issue as the central one and crosslink all issues to this one. Please, also crosslink between Jira and GitLab issues. After a discussion about a feature update the issue description with the consensus or final conclusions. This makes it much easier to see the current state of an issue for everyone involved in the implementation and prevents confusion and discussion later on. Submit the smallest item of work that makes sense. When creating an issue describe the smallest fix possible, put suggestions for enhancements in separate issues and link them. If you're new to MyCompany and are writing documentation or instructions, submit your first merge request for at most 20 lines. Do not leave issues open for a long time, issues should be actionable and realistic. If you are assigned to an issue but don't have time to work on it, assign it to someone else. Make a conscious effort to prioritize your work. The priority of items depends on multiple factors: Is there a team member waiting for the answer? What is the impact if you delay it? How many people does it affect, etc.? Pick issues from the current milestone. We try not to assign issues to people but to have people pick issues in a milestone themselves. Assign an issue to yourself as soon as you start to work on it, but not before that time. If you complete part of an issue and need someone else to take the next step, re-assign the issue to that person. When re-assigning an issue, make sure that the issue description contains the latest information. The issue description should be the single source of truth . When working on an issue, ask for feedback from your peers. For example, if you're a designer and you propose a design, ping a fellow designer to review your work. If they approve, you can move it to the next step. If they suggest changes, you get the opportunity to improve your design. This promotes collaboration and advances everyone's skills. We keep our promises and do not make external promises without internal agreement. Do not close an issue until it is done . When closing an issue leave a comment explaining why you are closing the issue.","title":"Everything starts with an issue"},{"location":"en/general/communication/#implement-it-with-a-merge-request","text":"Even when something is not done, share it internally so people can comment early and prevent rework. Create a Work In Progress merge request so it is not merged by accident. If any followup actions are required on the issue after the merge request is merged (like reporting back to any customers or writing documentation), avoid auto closing it. When you are done with your merge request, remove the \"WIP\" prefix. You can still make changes based on feedback of course, but by removing the \"WIP\" prefix it clarifies that the main body of work has been completed.","title":"Implement it with a merge request"},{"location":"en/general/communication/#internal-communication","text":"All written communication happens in English or French, even when sent one on one, because sometimes you need to forward an email or chat. Use asynchronous communication when possible (issues and email instead of chat). Issues are preferred over email, email is preferred over chat and people should be able to do their work without getting interrupted by chat . To use email instead of chat it is OK to send an internal email that contains only a short message, similar as you would use in chat. Save time by not including a salutation like 'Hi Emma,' and first write the subject of the email which you copy and paste into the body. You are not expected to be available all the time. It is perfectly fine not to respond to emails and chat mentions until your planned work hours. Sometimes synchronous communication is the better option, but do not default to it. For example, a video call can clear things up quickly when you are blocked. It is very OK to ask as many questions as you have, but ask them so many people can answer them and many people see the answer (so use issues or public chat channels instead of private messages or one-on-one emails) and make sure you document the answers. If you mention something (a merge request, issue, commit, webpage, comment, etc.) please include a link to it. All company data should be shareable by default. Don't use a local text file but rather leave comments on an issue. When someone asks something give back a deadline or that you did it. Answers like: 'will do', 'OK', 'it is on my todo list' are not helpful. If it is small is better to spend 2 minutes and do the tasks so the other person can mentally forget about it. If it is large you need to figure out when you'll do it, by returning that information the other person might decide to solve it in another way if it takes too long. Avoid as far as possible to use acronyms or code name, \u00ab Explicit is better than implicit \u00bb . Read why it: Acronyms Seriously Suck - Elon Musk","title":"Internal Communication"},{"location":"en/general/communication/#email","text":"Send one email per subject as multiple items in one email will cause delays (have to respond to everything) or misses (forgot one of the items). Always reply to emails by replying to all, even when no action is needed. This lets the other person know that you received it. A thread is done when there is a single word reply, such as OK, thanks, or done. If you forward an email without other comments please add FYI (for your information), FYA (for your action), or FYJ (for your judgment). If you forward an external request with FYJ it just means the person who forwarded it will not follow up on the request and expects you to decide if you should follow up or not. Emails are asynchronous, for example, if your manager emails you on a weekend it is fine to reply during the workweek. If an email is or has become urgent feel free to ping people via chat referencing the subject of the email.","title":"Email"},{"location":"en/general/communication/#chat","text":"If you use chat, please use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed. If you use chat and plan to message 3 or more people, we recommend to create a chat channel for customer/issue/project/problem/partnership. If you're only referring to someone, but don't actually need their attention, and want to spare them from getting notified, spell out their name normally without @ mentioning them. If the subject is of value to the wider community, consider commenting on an existing issue or opening a new issue instead. Despite the instantaneous nature of chat, it should be considered asynchronous communication. Don't expect an instantaneous response; you have no idea what the other person is doing. If you must send a private message, don't start a conversation with \"Hi\" or \"Hey\" as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g. \"I'm having trouble understanding issue #x, can we talk about it quickly?\". Unless you're in an active chat, don't break up a topic into multiple messages as each one will result in a notification which can be disruptive. Use threads if you want to provide extra info to the question/comment you posted. Especially in channels like #questions are threads very valuable to keep conversations about a certain question together. Because we work globally, you may receive chat mentions at any time of day. Please consider enabling Slack's Do not disturb functionality so you don't get interrupted, for example, in your evenings. Do not feel obligated to respond to chat messages when you are not working. Feel free to send a colleague a link to these guidelines if the communication in Slack should be done asynchronously . If you are having a hard time keeping up with chat messages, you can update your preferences to have Slack email you all notifications. To change the setting, go to Preferences > Notifications > When I'm not active on desktop... and \"send me email notifications\". Please avoid using @here unless this is about something urgent and important. In chat try to keep the use of keywords that mention the whole channel to a minimum. They should only be used for pings that are both urgent and important, not just important. By overusing channel mentions you make it harder to respond to personal mentions in a timely manner since people get pinged too frequently. If something is urgent and important: Use @here to notify all currently active members in the room. Please only us @here if the message is important and urgent. Use @channel to notify ALL members in the room, irrespective of away status. If something is important but not urgent - like complimenting or encouraging the entire team - use email or post in the channel without @ -mentioning the team. If you agree in a chat to start a video call (typically by asking \"Call?\") the person that didn't leave the last comment starts the call. So either respond to the \"Call?\" request with a video link or say \"Yes\" and let the other person start it. Don't say \"Yes\" and start a call 5 seconds later since it is likely you'll both be creating a video call link at the same time. If you are aware that your teammate is on vacation, avoid mentioning them in a high volume channel. It will be difficult to find the information or question when they return. If you need to ensure they refer back to the thread, ensure to send them a link to the relevant Slack message through a direct message. It's not rude to leave a channel. When you're no longer interested in the conversations happening in a channel, feel free to leave it so it won't distract you anymore.","title":"Chat"},{"location":"en/general/communication/#say-thanks","text":"Thank people that did a great job in our \"Thanks\" chat channel. If someone is a team member just @ mention them. If multiple people were working on something try mentioning each person by \"@name\". \"Thanks everyone\" does not say much. To thank someone who is not a team member, mention your manager, our People Ops Coordinator, the name of the person, a quirky gift and link to their work. For example, \"@manager, @peopleopscoordinator: Joe deserves a lawnmower for link \". With your manager's blessing, the People Ops Coordinator will approach the person in question for their address saying we want to send some swag. We'll ship it in gift wrap with \"Thanks for your great work on link , love from @gitlab\". Don't thank the CEO or other executives for something that the company paid for, thank MyCompany instead.","title":"Say Thanks"},{"location":"en/general/communication/#situation-complication-implication-position-action-benefit-scipab","text":"When you only have a few minutes to present your case or grab your listeners attention, this six-step process can help you communicate better and faster. Situation - Expresses the current state for discussion Complication - Summarzies the critical issues, challenges or opportunities Implication - Provides insight into the consequences that will be a result of if the Complications are not addressed. Position - Notes the presenter's opinion on the necessary changes which should be made. Action - Defines the expectations of the target audience/listeners. Benefit - Clearly concludes how the Position and Action sections will address the Complications. This method can be used in presentations, emails and everyday conversations. Example - The Management team asking for time to resolve a problem S - The failure rate last year for product X1 was an acceptable 1.5%. C - Because of supply shortages in the current fiscal year we are forced to change the material of a key component. I - Unfortunately, that resulted in the failure rate doubling this year. P - It is critical we address this problem immediately. A - Please approve the team 5 days to investigate the specific causes of the increase and establish the necessary next steps. B - By doing this we will redue the failure rate to an acceptabel level and develop guidelines for preventing such problems in the future. More information can be found at SCIPAB- Six Steps To Reach Your Audience","title":"Situation-Complication-Implication-Position-Action-Benefit (SCIPAB)"},{"location":"en/general/general-guidelines/","text":"General Guidelines \u00b6 General Guidelines \u00b6 Do not make jokes or unfriendly remarks about race, ethnic origin, skin color, gender, or sexual orientation. Use inclusive language. For example, prefer \"Hi everybody\" or \"Hi people\" to \"Hi guys\". Share problems you run into, ask for help, be forthcoming with information and speak up . Don't display surprise when people say they don't know something, as it is important that everyone feels comfortable saying \"I don't know\" and \"I don't understand.\" (As inspired by Recurse .) Develop procedures and templates in a handbook-first way, as opposed to migrating content to the handbook later from Google/Word documents. This ensures the handbook is always up-to-date. This makes them easier to find and suggest changes to with the organization and shows our commitment to open collaboration outside the organization. This means discussion and collaboration on this content should happen in issue comments or merge request comments. Most things are public unless there is a reason not to. Not public by default are: security vulnerabilities financial and legal information individual job applications / compensation / feedback partnerships with other companies customer information in issues: if an issue needs to contain any specific information about a customer, including but not limited to company name, employee names, number of users, the issue should be made confidential. Share solutions you find and answers you receive with the whole community . If you make a mistake, don't worry, correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it and how, if needed, you changed the process to prevent future mistakes. You can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable. Everyone can remind anyone in the company about these guidelines. If there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions. If you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer) please let your boss, or the CEO, know as soon as you realize it. We want to solve problems while they are small . We want to have a great company so if you meet people that are better than yourself try to recruit them to join the company. Make a conscious effort to recognize the constraints of others within the team. For example, sales is hard because you are dependent on another organization, and Development is hard because you have to preserve the ability to quickly improve the product in the future. For each action or comment, it helps to ask yourself (i) does this help the company achieve its strategic goals? (ii) is this in the company's interest, and finally, (iii) how can I contribute to this effort/issue in a constructive way? There is no need for consensus , make sure that you give people that might have good insights a chance to respond (by /cc'ing them) but make a call yourself because consensus doesn't scale . Everyone at the company cares about your output . Being away from the keyboard during the workday, doing private browsing or making personal phone calls is fine and encouraged. Everything is always in draft and subject to change, including this handbook. So do not delay documenting things and do not include \"draft\" in the titles of documents. Ensure everyone can read the current state. Nothing will ever be finished. Explicitly note what next action you propose or expect and from whom. Before replying to a request, complete the requested task first. Otherwise, indicate when you plan to complete it in your response. In the latter case, always send a message after the task is subsequently completed. Respect the privacy of our users and your fellow MyCompany. Secure our production data at all times. Only work with production data when this is needed to perform your job. Looking into production data for malicious reasons (for example, LOVEINT ) is a fireable offense. If you don't have time to do something let people know when they give you the tasks instead of having it linger so they can find an alternative. You can use the text: \"I have other priorities and can't help with this\" or \"I can complete this on May 25, please let me know if that is OK\". Also see our handbook usage .","title":"General Guidelines"},{"location":"en/general/general-guidelines/#general-guidelines","text":"","title":"General Guidelines"},{"location":"en/general/general-guidelines/#general-guidelines_1","text":"Do not make jokes or unfriendly remarks about race, ethnic origin, skin color, gender, or sexual orientation. Use inclusive language. For example, prefer \"Hi everybody\" or \"Hi people\" to \"Hi guys\". Share problems you run into, ask for help, be forthcoming with information and speak up . Don't display surprise when people say they don't know something, as it is important that everyone feels comfortable saying \"I don't know\" and \"I don't understand.\" (As inspired by Recurse .) Develop procedures and templates in a handbook-first way, as opposed to migrating content to the handbook later from Google/Word documents. This ensures the handbook is always up-to-date. This makes them easier to find and suggest changes to with the organization and shows our commitment to open collaboration outside the organization. This means discussion and collaboration on this content should happen in issue comments or merge request comments. Most things are public unless there is a reason not to. Not public by default are: security vulnerabilities financial and legal information individual job applications / compensation / feedback partnerships with other companies customer information in issues: if an issue needs to contain any specific information about a customer, including but not limited to company name, employee names, number of users, the issue should be made confidential. Share solutions you find and answers you receive with the whole community . If you make a mistake, don't worry, correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it and how, if needed, you changed the process to prevent future mistakes. You can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable. Everyone can remind anyone in the company about these guidelines. If there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions. If you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer) please let your boss, or the CEO, know as soon as you realize it. We want to solve problems while they are small . We want to have a great company so if you meet people that are better than yourself try to recruit them to join the company. Make a conscious effort to recognize the constraints of others within the team. For example, sales is hard because you are dependent on another organization, and Development is hard because you have to preserve the ability to quickly improve the product in the future. For each action or comment, it helps to ask yourself (i) does this help the company achieve its strategic goals? (ii) is this in the company's interest, and finally, (iii) how can I contribute to this effort/issue in a constructive way? There is no need for consensus , make sure that you give people that might have good insights a chance to respond (by /cc'ing them) but make a call yourself because consensus doesn't scale . Everyone at the company cares about your output . Being away from the keyboard during the workday, doing private browsing or making personal phone calls is fine and encouraged. Everything is always in draft and subject to change, including this handbook. So do not delay documenting things and do not include \"draft\" in the titles of documents. Ensure everyone can read the current state. Nothing will ever be finished. Explicitly note what next action you propose or expect and from whom. Before replying to a request, complete the requested task first. Otherwise, indicate when you plan to complete it in your response. In the latter case, always send a message after the task is subsequently completed. Respect the privacy of our users and your fellow MyCompany. Secure our production data at all times. Only work with production data when this is needed to perform your job. Looking into production data for malicious reasons (for example, LOVEINT ) is a fireable offense. If you don't have time to do something let people know when they give you the tasks instead of having it linger so they can find an alternative. You can use the text: \"I have other priorities and can't help with this\" or \"I can complete this on May 25, please let me know if that is OK\". Also see our handbook usage .","title":"General Guidelines"},{"location":"en/general/handbook-usage/","text":"Handbook Usage \u00b6 Advantages \u00b6 At MyCompany our handbook is extensive and keeping it relevant is an important part of everyone's job. It is a vital part of who we are and how we communicate. We established these processes because we saw these benefits: Reading is much faster than listening. Reading is async, you don't have to interrupt someone or wait for them to become available. Recruiting is easier if people can see what we stand for and how we operate. Retention is better if people know what they are getting into before they join. On-boarding is easier if you can find all relevant information spelled out. Teamwork is easier if you can read how other parts of the company work. Discussing changes is easier if you can read what the current process is. Communicating change is easier if you can just point to the diff. Everyone can contribute to it by proposing a change via a merge request. Flow structure \u00b6 A (process) problem comes up, frequently in an issue or chat. A proposal is made in a merge request to the handbook. After merging, the change is announced by linking to the diff in the MR or commit. Major ones are put in the agenda of the team call. Medium ones are put in a chat channel. If there was an issue, close it out with a link to the diff. Why handbook first \u00b6 Documenting things in the handbook takes more time initially. You have to think about where to make the change, integrate it with the existing content, and then possibly add to or refactor the handbook to have a foundation. But it saves time over a longer period and this communication is essential to be able to continue scaling and adapting our organization. This process is not unlike writing tests for your software. Only communicate a (proposed) change via a change to the handbook; don't use a presentation, email, chat message, or another medium to communicate the components of the change. These other forms of communication might be more convenient for the presenter, but it is harder for the audience to understand the context and the implications for other processes. Having a \"handbook first\" mentality makes sure there is no duplication, the handbook is always up-to-date, and others are able to contribute. Handbook guidelines \u00b6 Please follow these guidelines and remind others of them. Most guidelines in this handbook are meant to help, and unless otherwise stated, are meant to help more than being absolute rules. Don't be afraid to do something because you don't know the entire handbook, nobody does. Be gentle when reminding people about these guidelines. For example say, \"It is not a problem, but next time please consider the following guideline from the handbook.\" If you ask a question and someone answers with a link to the handbook, they do this because they want to help by providing more information. They may also be proud that we have the answer documented. It doesn't mean that you should have read the entire handbook, nobody knows the entire handbook. If you need to ask a team member for help, please realize that there is a good chance the majority of the community also doesn't know the answer. Be sure to document the answer to radiate this information to the whole community. After the question is answered, discuss where it should be documented and who will do it. You can remind other people of this request by asking \"Who will document this?\" When you discuss something in chat always try to link to a URL where relevant. For example, the documentation you have a question about or the page that answered your question. You can remind other people of this by asking \"Can you please link?\" To change a guideline or process, suggest an edit in the form of a merge request. After it is merged you can talk about it during the team call if applicable. You can remind other people of this by asking \"Can you please send a merge request for the handbook?\" When substantially changing handbook layout, please leave a link to the specific page of the review app that is directly affected by this MR . Along with the link, include as much info as possible in the MR description. This will allow everyone to understand what is the purpose of the MR without looking at diffs. Communicate process changes by linking to the merged diff (a commit that shows the changes before and after). If you are communicating a change for the purpose of discussion and feedback, it is ok to link to an unmerged diff . Do not change the process first, and then view the documentation as a lower priority task. Planning to do the documentation later inevitably leads to duplicate work communicating the change and it leads to outdated documentation. You can remind other people of this by asking \"Can you please update the handbook first?\" Remember, the handbook is not what we hope to do, what we should formally do, or what we did months ago. It is what we do right now. Make sure you change the handbook in order to truly change a process. To propose a change to a process, make a merge request to change the handbook. Don't use another channel to propose a handbook change (email, Google Doc, etc.). Like everything else, our processes are always in flux. Everything is always in draft, and the initial version should be in the handbook, too. If you are proposing a change to the handbook, whenever possible, skip the issue and submit a merge request. Mention the people that affected by the change in the merge request. In many cases, merge requests are easier to collaborate on since you can see the proposed changes. Proposing a change via a merge request is preferred over an issue description. A merge request allows people to see the context of your change. If something is a limited test to a group of users, add it to the handbook and note as such. Then remove the note once the test is over and every case should use the new process. When communicating something always include a link to the relevant (and up-to-date) part of the handbook instead of including the text in the email/chat/etc. You can remind other people of this by asking \"Can you please link to the relevant part of the handbook?\" If you copy content please remove it at the origin place and replace it with a link to the new content. Think about the information architecture so that you Don't Repeat Yourself . Duplicate content leads to updating it in the wrong place, keep it DRY . Make sure to always cross-link items if there are related items (elsewhere in the handbook, in docs, or in issues). The handbook is structured by function and result to ensure every item in it has a clear owner and location in order to keep it up-to-date. Please cross-link liberally to point people to other sections. Avoid unstructured content based on format like: FAQ's, lists of links, resource pages, glossaries, courses, videos, tests, or how-to's. These are very hard to keep up-to-date and are not compatible with organization per function and result. Instead put the answer, link, definition, course, video, or test in the most relevant place. Use descriptive headers so that people can easily search for content. Please mix different formats in the handbook on the same page. Having multiple formats to use is valuable and different people prefer different formats. Worry about the organization per function and result, not about how it will look if you embed different types of content. The handbook is the process. Any sections with names like 'process', 'policies', 'best practices', or 'standard operating procedures' are an indication of a deeper problem. This may indicate a duplication between a prose description of a process and a numbered list description of the same process that should be combined in one description of the process. When you submit a merge request, make sure that it gets merged quickly. Making single, small changes quickly will ensure your branch doesn't fall far behind master, creating merge conflicts. Aim to make and merge your update on the same day. Mention people in the merge request or reach them via Slack. If you get a suggestion for a large improvement on top of the exiting one consider doing that separately. Create an issue, get the exiting MR merged, then create a new merge request. Only mark a merge request as \"WIP\" (Work in Progress) if it will negatively affect the company if merged too early. That can be the case for application code but is almost not possible for handbook MRs. If you have to move content have a merge request that moves it and does nothing else. If you want to clean it up, summarize it, or expand on it do that haver the moving MR is merged. This is much easier to review. Keep your handbook pages short and succinct. Eliminate fluff and get right to the point with the shortest possible wording. Keep in mind that the biggest challenge cited by new employees is the vast amount of information to take in during on-boarding. Anything more than a spelling correction is better done in the terminal than with the online editor. All people that are reluctant to update the handbook are not using the terminal, a local editor, and a local preview. Please follow the instructions in edit this website locally . Try to add the why of a handbook process, what is the business goal, what is the inspiration for this section. Adding the why makes processes easier to change in the future since you can evaluate if the why changed. We translate some very important Handbook Section ( values and communication ) in French to avoid misunderstanding. Screenshare the handbook instead of creating a presentation \u00b6 Presentations are great for ephemeral content and board presentations. Please screenshare the handbook instead of creating a presentation for everygreen content because: It saves you the effort of creating a presentation. People can easily find the handbook section later on. The handbook is checked and improved as part of the preperation. The content is open to contributions. The content is integrated with the rest of our processes. Also see some of the advantages of using our handbook . Make it worthwhile \u00b6 Another company asked how we managed to work with the handbook because at their company it wasn't working: \"There are many occasions where something is documented in the knowledge base, but people don't know about it because they never bothered to read or search. Some people have a strong aversion against what they perceive as a 'wall of text'.\" To ensure that people's time is well spend looking at the handbook we should: Keep your handbook pages short and succinct Use present tense and simple words Organize per function so the information architecture is clear Cross-link liberally so users can find relevant other information easily Great search function (we use Algolia) Make it public so you can Google search Have clean urls and allow for deeplinking paragraphs Use automatic tables of content Have lots of headers that give the key message Make key words bold When people ask questions link to the handbook instead of giving the answer Test people on their knowledge during onboarding Avoid duplication, instead just link Give real examples Avoid corporate speak, describe things like you're talking to a friend Use lots of numbered lists, unordered lists, and tables Embed videos to consume the content by watching Add drawings, gifs, cartoons, and graphics to make it interesting and memorable When someone asks something that isn't there, add it to the handbook and respond with a link to the diff","title":"Handbook Usage"},{"location":"en/general/handbook-usage/#handbook-usage","text":"","title":"Handbook Usage"},{"location":"en/general/handbook-usage/#advantages","text":"At MyCompany our handbook is extensive and keeping it relevant is an important part of everyone's job. It is a vital part of who we are and how we communicate. We established these processes because we saw these benefits: Reading is much faster than listening. Reading is async, you don't have to interrupt someone or wait for them to become available. Recruiting is easier if people can see what we stand for and how we operate. Retention is better if people know what they are getting into before they join. On-boarding is easier if you can find all relevant information spelled out. Teamwork is easier if you can read how other parts of the company work. Discussing changes is easier if you can read what the current process is. Communicating change is easier if you can just point to the diff. Everyone can contribute to it by proposing a change via a merge request.","title":"Advantages"},{"location":"en/general/handbook-usage/#flow-structure","text":"A (process) problem comes up, frequently in an issue or chat. A proposal is made in a merge request to the handbook. After merging, the change is announced by linking to the diff in the MR or commit. Major ones are put in the agenda of the team call. Medium ones are put in a chat channel. If there was an issue, close it out with a link to the diff.","title":"Flow structure"},{"location":"en/general/handbook-usage/#why-handbook-first","text":"Documenting things in the handbook takes more time initially. You have to think about where to make the change, integrate it with the existing content, and then possibly add to or refactor the handbook to have a foundation. But it saves time over a longer period and this communication is essential to be able to continue scaling and adapting our organization. This process is not unlike writing tests for your software. Only communicate a (proposed) change via a change to the handbook; don't use a presentation, email, chat message, or another medium to communicate the components of the change. These other forms of communication might be more convenient for the presenter, but it is harder for the audience to understand the context and the implications for other processes. Having a \"handbook first\" mentality makes sure there is no duplication, the handbook is always up-to-date, and others are able to contribute.","title":"Why handbook first"},{"location":"en/general/handbook-usage/#handbook-guidelines","text":"Please follow these guidelines and remind others of them. Most guidelines in this handbook are meant to help, and unless otherwise stated, are meant to help more than being absolute rules. Don't be afraid to do something because you don't know the entire handbook, nobody does. Be gentle when reminding people about these guidelines. For example say, \"It is not a problem, but next time please consider the following guideline from the handbook.\" If you ask a question and someone answers with a link to the handbook, they do this because they want to help by providing more information. They may also be proud that we have the answer documented. It doesn't mean that you should have read the entire handbook, nobody knows the entire handbook. If you need to ask a team member for help, please realize that there is a good chance the majority of the community also doesn't know the answer. Be sure to document the answer to radiate this information to the whole community. After the question is answered, discuss where it should be documented and who will do it. You can remind other people of this request by asking \"Who will document this?\" When you discuss something in chat always try to link to a URL where relevant. For example, the documentation you have a question about or the page that answered your question. You can remind other people of this by asking \"Can you please link?\" To change a guideline or process, suggest an edit in the form of a merge request. After it is merged you can talk about it during the team call if applicable. You can remind other people of this by asking \"Can you please send a merge request for the handbook?\" When substantially changing handbook layout, please leave a link to the specific page of the review app that is directly affected by this MR . Along with the link, include as much info as possible in the MR description. This will allow everyone to understand what is the purpose of the MR without looking at diffs. Communicate process changes by linking to the merged diff (a commit that shows the changes before and after). If you are communicating a change for the purpose of discussion and feedback, it is ok to link to an unmerged diff . Do not change the process first, and then view the documentation as a lower priority task. Planning to do the documentation later inevitably leads to duplicate work communicating the change and it leads to outdated documentation. You can remind other people of this by asking \"Can you please update the handbook first?\" Remember, the handbook is not what we hope to do, what we should formally do, or what we did months ago. It is what we do right now. Make sure you change the handbook in order to truly change a process. To propose a change to a process, make a merge request to change the handbook. Don't use another channel to propose a handbook change (email, Google Doc, etc.). Like everything else, our processes are always in flux. Everything is always in draft, and the initial version should be in the handbook, too. If you are proposing a change to the handbook, whenever possible, skip the issue and submit a merge request. Mention the people that affected by the change in the merge request. In many cases, merge requests are easier to collaborate on since you can see the proposed changes. Proposing a change via a merge request is preferred over an issue description. A merge request allows people to see the context of your change. If something is a limited test to a group of users, add it to the handbook and note as such. Then remove the note once the test is over and every case should use the new process. When communicating something always include a link to the relevant (and up-to-date) part of the handbook instead of including the text in the email/chat/etc. You can remind other people of this by asking \"Can you please link to the relevant part of the handbook?\" If you copy content please remove it at the origin place and replace it with a link to the new content. Think about the information architecture so that you Don't Repeat Yourself . Duplicate content leads to updating it in the wrong place, keep it DRY . Make sure to always cross-link items if there are related items (elsewhere in the handbook, in docs, or in issues). The handbook is structured by function and result to ensure every item in it has a clear owner and location in order to keep it up-to-date. Please cross-link liberally to point people to other sections. Avoid unstructured content based on format like: FAQ's, lists of links, resource pages, glossaries, courses, videos, tests, or how-to's. These are very hard to keep up-to-date and are not compatible with organization per function and result. Instead put the answer, link, definition, course, video, or test in the most relevant place. Use descriptive headers so that people can easily search for content. Please mix different formats in the handbook on the same page. Having multiple formats to use is valuable and different people prefer different formats. Worry about the organization per function and result, not about how it will look if you embed different types of content. The handbook is the process. Any sections with names like 'process', 'policies', 'best practices', or 'standard operating procedures' are an indication of a deeper problem. This may indicate a duplication between a prose description of a process and a numbered list description of the same process that should be combined in one description of the process. When you submit a merge request, make sure that it gets merged quickly. Making single, small changes quickly will ensure your branch doesn't fall far behind master, creating merge conflicts. Aim to make and merge your update on the same day. Mention people in the merge request or reach them via Slack. If you get a suggestion for a large improvement on top of the exiting one consider doing that separately. Create an issue, get the exiting MR merged, then create a new merge request. Only mark a merge request as \"WIP\" (Work in Progress) if it will negatively affect the company if merged too early. That can be the case for application code but is almost not possible for handbook MRs. If you have to move content have a merge request that moves it and does nothing else. If you want to clean it up, summarize it, or expand on it do that haver the moving MR is merged. This is much easier to review. Keep your handbook pages short and succinct. Eliminate fluff and get right to the point with the shortest possible wording. Keep in mind that the biggest challenge cited by new employees is the vast amount of information to take in during on-boarding. Anything more than a spelling correction is better done in the terminal than with the online editor. All people that are reluctant to update the handbook are not using the terminal, a local editor, and a local preview. Please follow the instructions in edit this website locally . Try to add the why of a handbook process, what is the business goal, what is the inspiration for this section. Adding the why makes processes easier to change in the future since you can evaluate if the why changed. We translate some very important Handbook Section ( values and communication ) in French to avoid misunderstanding.","title":"Handbook guidelines"},{"location":"en/general/handbook-usage/#screenshare-the-handbook-instead-of-creating-a-presentation","text":"Presentations are great for ephemeral content and board presentations. Please screenshare the handbook instead of creating a presentation for everygreen content because: It saves you the effort of creating a presentation. People can easily find the handbook section later on. The handbook is checked and improved as part of the preperation. The content is open to contributions. The content is integrated with the rest of our processes. Also see some of the advantages of using our handbook .","title":"Screenshare the handbook instead of creating a presentation"},{"location":"en/general/handbook-usage/#make-it-worthwhile","text":"Another company asked how we managed to work with the handbook because at their company it wasn't working: \"There are many occasions where something is documented in the knowledge base, but people don't know about it because they never bothered to read or search. Some people have a strong aversion against what they perceive as a 'wall of text'.\" To ensure that people's time is well spend looking at the handbook we should: Keep your handbook pages short and succinct Use present tense and simple words Organize per function so the information architecture is clear Cross-link liberally so users can find relevant other information easily Great search function (we use Algolia) Make it public so you can Google search Have clean urls and allow for deeplinking paragraphs Use automatic tables of content Have lots of headers that give the key message Make key words bold When people ask questions link to the handbook instead of giving the answer Test people on their knowledge during onboarding Avoid duplication, instead just link Give real examples Avoid corporate speak, describe things like you're talking to a friend Use lots of numbered lists, unordered lists, and tables Embed videos to consume the content by watching Add drawings, gifs, cartoons, and graphics to make it interesting and memorable When someone asks something that isn't there, add it to the handbook and respond with a link to the diff","title":"Make it worthwhile"},{"location":"en/general/values/","text":"Values \u00b6 CREDIT \u00b6 MyCompany's six values are Collaboration , Results , Efficiency , Diversity , Iteration , and Transparency , and together they spell the CREDIT we give each other by assuming good intent. Our values are interlinked and work with one another to protect our culture. They are made actionable below. Collaboration \u00b6 Helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve. Similarly, you can rely on others for help and advice\u2014in fact, you're expected to do so. Anyone can chime in on any subject, including people who don't work at MyCompany. The person who's responsible for the work decides how to do it, but they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented. Kindness We value caring for others. Demonstrating we care for people provides an effective framework for challenging directly and delivering feedback. We disagree with companies that say Evaluate People Accurately, Not \"Kindly\" . We're all for accurate assessment, but we think it must be done in a kind way. Give as much positive feedback as you can, and do it in a public way. Teach There are aspects of MyCompany culture, such as working asynchronously and extreme transparency, that are unintuitive to outsiders and new team members. Be willing to invest in people and start a dialog around situations such as making a private issue public so that we can all learn from the experience. Negative is 1-1 Give negative feedback in the smallest setting possible. One-on-one video calls are preferred. Say thanks Recognize the people that helped you publicly, for example in our #thanks chat channel . Give feedback effectively Giving feedback is challenging, but it's important to deliver it effectively. When providing feedback, always make it about the work itself, focus on the business impact and not the person. Make sure to provide at least one clear and recent example. If a person is going through a hard time in their personal life, then take that into account. An example of giving positive feedback is our thanks chat channel . For managers, it's important to realize that employees react to a negative incident with their managers six times more strongly than they do to a positive one. Keeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself. In the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the employee\u2019s performance going forward. Give recognition generously, in the open, and often to generate more engagement from your team. Get to know each other We use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts. So encourage people to get to know each other on a personal level through coffee breaks, lunch... Don't pull rank If you have to remind someone of the position you have in the company, you're doing something wrong. People already know we have a hierarchical decision-making process. Explain why you're making the decision, and respect everyone irrespective of their function. Address behavior, but don't label people There is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person. We avoid classifications. Say sorry If you made a mistake apologize, saying sorry is not a sign of weakness but one of strength. The people that do the most work will likely make the most mistakes. Additionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to repeated by someone else. No ego Don't defend a point to win an argument or double-down on a mistake. You are not your work; you don't have to defend your point. You do have to search for the right answer with help from others. See others succeed A candidate who has talked to a lot of people inside MyCompany mentioned that, compared to other companies, one thing stood out the most: everyone at here mentioned wanting to see each other succeed. People are not their work Always make suggestions about examples of work, not the person. Say, \"you didn't respond to my feedback about the design,\" instead of, \"you never listen\". And, when receiving feedback, keep in mind that feedback is the best way to improve and that others want to see you succeed. Do it yourself Our collaboration value is about helping each other when we have questions, need critique, or need help. No need to brainstorm, wait for consensus, or do with two what you can do yourself . Results \u00b6 We do what we promised to each other, customers, users, and investors. Measure results not hours We care about what you achieve; the code you shipped, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn't feel like they did something wrong. You don't have to defend how you spend your day. We trust team members to do the right thing instead of having rigid rules. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too long hours talk to your manager to discuss solutions. Write promises down Agree in writing on measurable goals. Within the company we use OKRs for that. Growth mindset You don't always get results and this will result in criticism from yourself and/or others. We believe our talents can be developed through hard work, good strategies, and input from others. We try to hire people based on their trajectory, not their pedigree . Global optimization This name comes from the quick guide to Stripe's culture . Our definition of global optimization is that you do what is best for the organization as a whole. Don't optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. Keep your team as lean as possible, and help other teams achieve their goals. Tenacity We refer to this as \"persistence of purpose\". As talked about in The Influence Blog tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. Ownership We expect team members to complete tasks that they are assigned. Having a task means you are responsible for anticipating and solving problems. As an owner you are responsible for overcoming challenges, not suppliers, or other team members. Take initiative and pro-actively inform stakeholders when there is something you might not be able to solve. Sense of urgency At an exponentially scaling startup time gained or lost has compounding effects. Try to get the results as fast as possible so the compounding of results can begin and we can focus on the next improvement. Ambitious While we iterate with small changes, we strive for large, ambitious results. Efficiency \u00b6 We care about working on the right things, not doing more than needed, and not duplicating work. This enables us to achieve more progress, which makes our work more fulfilling. Boring solutions Use the simplest and most boring solution for a problem, and remember that \u201cboring\u201d should not be conflated with \u201cbad.\u201c The speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps. Don\u2019t pick an interesting technology just to make your work more fun; using established, popular tech will ensure a stabler and more familiar experience for you and other contributors. Be respectful of others' time Consider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions. Spend company money like it's your own Every dollar we spend will have to be earned back; be as frugal with company money as you are with your own. Frugality Amazon states it best with: \"Accomplish more with less. Constraints breed resourcefulness, self-sufficiency and invention. There are no extra points for growing headcount, budget size or fixed expense.\". ConvDev We work according to the principles of conversational development . Freedom You should have clear objectives and the freedom to work on them as you see fit. Short verbal answers Give short answers to verbal questions so the other party has the opportunity to ask more or move on. Keep broadcasts short And keep 1 to many written communication short, as mentioned in this HBR study : \"A majority say that what they read is frequently ineffective because it\u2019s too long, poorly organized, unclear, filled with jargon, and imprecise.\". Managers of one We want team members to be a manager of one who doesn't need daily check-ins to achieve their goals. Responsibility over rigidity When possible we give people the responsibility to make a decision and hold them accountable for that instead of imposing rules and approval processes. Accept mistakes Not every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient, a mistake only affects one. Move fast by shipping the minimum viable change We value constant improvement by iterating quickly, month after month. If a task is too big to deliver in one month, cut scope. Iteration \u00b6 We do the smallest thing possible and get it out as quickly as possible. If you make suggestions that can be excluded from the first iteration turn them into a separate issue that you link. Don't write a large plan, only write the first step. Trust that you'll know better how to proceed after something is released. You're doing it right if you're slightly embarrassed by the minimal feature set shipped in the first iteration. This value is the one people underestimate when they join MyCompany, the impact both on your work process and on how much you achieve is greater than anticipated. In the beginning it hurts to make decisions fast and to see that things are changed with less consultation. But frequently the simplest version turns out to be the best one. People that join MyCompany all say they already practice this iteration. But this is the value that they have the hardest time adopting. People are trained that if you don't deliver a perfect or polished thing you get dinged for it. If you do just one piece of something you have to come back to it. Doing the whole thing seems more efficient, even though it isn't. If the complete picture is not clear your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other people in the MyCompany organization being really effective with iteration but don't know how to make the transition. The way to resolve this is to write down only what you can do with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration feels uncomfortable, and people might ask why something was not perfect. In that case mention that it was an iteration, you spent only x amount of time on it, and that the next iteration will contain y and be ready on z. Reduce cycle time Short iterations reduce our cycle time . Minimum Viable Change (MVC) Always look to make the quickest change possible to improve the outcome. If you think it is better than what is there now do it. No need to wait for something polished. More information is in the product handbook but it applies to everything we do in all functions. Make a proposal If you need to decide something as a team make a proposal instead of calling a meeting to get everyone's input. Having a proposal will be a much more effective use of everyone's time. The people that receive the proposal should not feel left out, the person making it should not feel bad if a completely different proposal is implemented. Don't let your ego to be involved early or to see your solution implemented stand in the way of getting to the best outcome. Everything is in draft At MyCompany we rarely put draft on any content or proposals. Everything is always in draft and subject to change. Under construction As we get more users they will ask for stability, especially in our UX. We should always optimize for the long term. This means that users will be inconvenienced in the short term, but current and future users will enjoy a better product in the end. Low level of shame When we talked to Nat Friedman he said: \"A low level of shame is intrinsic to your culture.\". This captures the pain we feel by shipping something that isn't where we want it to be yet. Five dysfunctions \u00b6 Our values help us to prevent the five dysfunctions . Absence of trust Unwilling to be vulnerable within the group => prevented by collaboration, specifically kindness Fear of conflict Seeking artificial harmony over constructive passionate debate => prevented by transparency, specifically directness Lack of commitment Feigning buy-in for group decisions creates ambiguity throughout the organization => prevented by transparency, specifically directness Avoidance of accountability Ducking the responsibility to call peers on counterproductive behavior which sets low standards => prevented by results, iteration, and transparency Inattention to results Focusing on personal success, status and ego before team success => prevented by results Some dysfunctions are not addressed directly by our values, for example trust is not one of our values. Similar to happiness, trust is something that is an outcome, not something you can strive for directly. We hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given. Why have values \u00b6 Our values should give guidelines on how to behave and must be actionable. They help us describe the type of behavior that we expect from people we hire. They help us to know how to behave in the organization and what to expect from others. Values are a framework for distributed decision making, they allow you to determine what to do without asking your manager. Updating our values \u00b6 Our values are updated continually when needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. Please post a link to the MR in the #values channel. How do we reinforce our values \u00b6 Whatever behavior you reward will become your values. We reinforce our values through the following actions: By what we do, especially what the leadership does. By what we select for during hiring. By what we emphasize during on-boarding. By what criteria we use for promotions By what criteria we use for bonuses. By what behavior we compliment. By what criteria we use to let people go. Permission to play \u00b6 From our values we excluded some behaviors that are obvious, we call them our permission to play behavior: Be truthful and honest. Be dependable, reliable, fair, and respectful. Be committed, creative, inspiring, and passionate. Be deserving of the trust of our users and customers. Act in the best interest of the company, our team members, our customers, users, and investors. Act in accordance with the law.","title":"Values"},{"location":"en/general/values/#values","text":"","title":"Values"},{"location":"en/general/values/#credit","text":"MyCompany's six values are Collaboration , Results , Efficiency , Diversity , Iteration , and Transparency , and together they spell the CREDIT we give each other by assuming good intent. Our values are interlinked and work with one another to protect our culture. They are made actionable below.","title":"CREDIT"},{"location":"en/general/values/#collaboration","text":"Helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve. Similarly, you can rely on others for help and advice\u2014in fact, you're expected to do so. Anyone can chime in on any subject, including people who don't work at MyCompany. The person who's responsible for the work decides how to do it, but they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented. Kindness We value caring for others. Demonstrating we care for people provides an effective framework for challenging directly and delivering feedback. We disagree with companies that say Evaluate People Accurately, Not \"Kindly\" . We're all for accurate assessment, but we think it must be done in a kind way. Give as much positive feedback as you can, and do it in a public way. Teach There are aspects of MyCompany culture, such as working asynchronously and extreme transparency, that are unintuitive to outsiders and new team members. Be willing to invest in people and start a dialog around situations such as making a private issue public so that we can all learn from the experience. Negative is 1-1 Give negative feedback in the smallest setting possible. One-on-one video calls are preferred. Say thanks Recognize the people that helped you publicly, for example in our #thanks chat channel . Give feedback effectively Giving feedback is challenging, but it's important to deliver it effectively. When providing feedback, always make it about the work itself, focus on the business impact and not the person. Make sure to provide at least one clear and recent example. If a person is going through a hard time in their personal life, then take that into account. An example of giving positive feedback is our thanks chat channel . For managers, it's important to realize that employees react to a negative incident with their managers six times more strongly than they do to a positive one. Keeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself. In the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the employee\u2019s performance going forward. Give recognition generously, in the open, and often to generate more engagement from your team. Get to know each other We use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts. So encourage people to get to know each other on a personal level through coffee breaks, lunch... Don't pull rank If you have to remind someone of the position you have in the company, you're doing something wrong. People already know we have a hierarchical decision-making process. Explain why you're making the decision, and respect everyone irrespective of their function. Address behavior, but don't label people There is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person. We avoid classifications. Say sorry If you made a mistake apologize, saying sorry is not a sign of weakness but one of strength. The people that do the most work will likely make the most mistakes. Additionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to repeated by someone else. No ego Don't defend a point to win an argument or double-down on a mistake. You are not your work; you don't have to defend your point. You do have to search for the right answer with help from others. See others succeed A candidate who has talked to a lot of people inside MyCompany mentioned that, compared to other companies, one thing stood out the most: everyone at here mentioned wanting to see each other succeed. People are not their work Always make suggestions about examples of work, not the person. Say, \"you didn't respond to my feedback about the design,\" instead of, \"you never listen\". And, when receiving feedback, keep in mind that feedback is the best way to improve and that others want to see you succeed. Do it yourself Our collaboration value is about helping each other when we have questions, need critique, or need help. No need to brainstorm, wait for consensus, or do with two what you can do yourself .","title":"Collaboration"},{"location":"en/general/values/#results","text":"We do what we promised to each other, customers, users, and investors. Measure results not hours We care about what you achieve; the code you shipped, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn't feel like they did something wrong. You don't have to defend how you spend your day. We trust team members to do the right thing instead of having rigid rules. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too long hours talk to your manager to discuss solutions. Write promises down Agree in writing on measurable goals. Within the company we use OKRs for that. Growth mindset You don't always get results and this will result in criticism from yourself and/or others. We believe our talents can be developed through hard work, good strategies, and input from others. We try to hire people based on their trajectory, not their pedigree . Global optimization This name comes from the quick guide to Stripe's culture . Our definition of global optimization is that you do what is best for the organization as a whole. Don't optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. Keep your team as lean as possible, and help other teams achieve their goals. Tenacity We refer to this as \"persistence of purpose\". As talked about in The Influence Blog tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. Ownership We expect team members to complete tasks that they are assigned. Having a task means you are responsible for anticipating and solving problems. As an owner you are responsible for overcoming challenges, not suppliers, or other team members. Take initiative and pro-actively inform stakeholders when there is something you might not be able to solve. Sense of urgency At an exponentially scaling startup time gained or lost has compounding effects. Try to get the results as fast as possible so the compounding of results can begin and we can focus on the next improvement. Ambitious While we iterate with small changes, we strive for large, ambitious results.","title":"Results"},{"location":"en/general/values/#efficiency","text":"We care about working on the right things, not doing more than needed, and not duplicating work. This enables us to achieve more progress, which makes our work more fulfilling. Boring solutions Use the simplest and most boring solution for a problem, and remember that \u201cboring\u201d should not be conflated with \u201cbad.\u201c The speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps. Don\u2019t pick an interesting technology just to make your work more fun; using established, popular tech will ensure a stabler and more familiar experience for you and other contributors. Be respectful of others' time Consider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions. Spend company money like it's your own Every dollar we spend will have to be earned back; be as frugal with company money as you are with your own. Frugality Amazon states it best with: \"Accomplish more with less. Constraints breed resourcefulness, self-sufficiency and invention. There are no extra points for growing headcount, budget size or fixed expense.\". ConvDev We work according to the principles of conversational development . Freedom You should have clear objectives and the freedom to work on them as you see fit. Short verbal answers Give short answers to verbal questions so the other party has the opportunity to ask more or move on. Keep broadcasts short And keep 1 to many written communication short, as mentioned in this HBR study : \"A majority say that what they read is frequently ineffective because it\u2019s too long, poorly organized, unclear, filled with jargon, and imprecise.\". Managers of one We want team members to be a manager of one who doesn't need daily check-ins to achieve their goals. Responsibility over rigidity When possible we give people the responsibility to make a decision and hold them accountable for that instead of imposing rules and approval processes. Accept mistakes Not every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient, a mistake only affects one. Move fast by shipping the minimum viable change We value constant improvement by iterating quickly, month after month. If a task is too big to deliver in one month, cut scope.","title":"Efficiency"},{"location":"en/general/values/#iteration","text":"We do the smallest thing possible and get it out as quickly as possible. If you make suggestions that can be excluded from the first iteration turn them into a separate issue that you link. Don't write a large plan, only write the first step. Trust that you'll know better how to proceed after something is released. You're doing it right if you're slightly embarrassed by the minimal feature set shipped in the first iteration. This value is the one people underestimate when they join MyCompany, the impact both on your work process and on how much you achieve is greater than anticipated. In the beginning it hurts to make decisions fast and to see that things are changed with less consultation. But frequently the simplest version turns out to be the best one. People that join MyCompany all say they already practice this iteration. But this is the value that they have the hardest time adopting. People are trained that if you don't deliver a perfect or polished thing you get dinged for it. If you do just one piece of something you have to come back to it. Doing the whole thing seems more efficient, even though it isn't. If the complete picture is not clear your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other people in the MyCompany organization being really effective with iteration but don't know how to make the transition. The way to resolve this is to write down only what you can do with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration feels uncomfortable, and people might ask why something was not perfect. In that case mention that it was an iteration, you spent only x amount of time on it, and that the next iteration will contain y and be ready on z. Reduce cycle time Short iterations reduce our cycle time . Minimum Viable Change (MVC) Always look to make the quickest change possible to improve the outcome. If you think it is better than what is there now do it. No need to wait for something polished. More information is in the product handbook but it applies to everything we do in all functions. Make a proposal If you need to decide something as a team make a proposal instead of calling a meeting to get everyone's input. Having a proposal will be a much more effective use of everyone's time. The people that receive the proposal should not feel left out, the person making it should not feel bad if a completely different proposal is implemented. Don't let your ego to be involved early or to see your solution implemented stand in the way of getting to the best outcome. Everything is in draft At MyCompany we rarely put draft on any content or proposals. Everything is always in draft and subject to change. Under construction As we get more users they will ask for stability, especially in our UX. We should always optimize for the long term. This means that users will be inconvenienced in the short term, but current and future users will enjoy a better product in the end. Low level of shame When we talked to Nat Friedman he said: \"A low level of shame is intrinsic to your culture.\". This captures the pain we feel by shipping something that isn't where we want it to be yet.","title":"Iteration"},{"location":"en/general/values/#five-dysfunctions","text":"Our values help us to prevent the five dysfunctions . Absence of trust Unwilling to be vulnerable within the group => prevented by collaboration, specifically kindness Fear of conflict Seeking artificial harmony over constructive passionate debate => prevented by transparency, specifically directness Lack of commitment Feigning buy-in for group decisions creates ambiguity throughout the organization => prevented by transparency, specifically directness Avoidance of accountability Ducking the responsibility to call peers on counterproductive behavior which sets low standards => prevented by results, iteration, and transparency Inattention to results Focusing on personal success, status and ego before team success => prevented by results Some dysfunctions are not addressed directly by our values, for example trust is not one of our values. Similar to happiness, trust is something that is an outcome, not something you can strive for directly. We hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given.","title":"Five dysfunctions"},{"location":"en/general/values/#why-have-values","text":"Our values should give guidelines on how to behave and must be actionable. They help us describe the type of behavior that we expect from people we hire. They help us to know how to behave in the organization and what to expect from others. Values are a framework for distributed decision making, they allow you to determine what to do without asking your manager.","title":"Why have values"},{"location":"en/general/values/#updating-our-values","text":"Our values are updated continually when needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. Please post a link to the MR in the #values channel.","title":"Updating our values"},{"location":"en/general/values/#how-do-we-reinforce-our-values","text":"Whatever behavior you reward will become your values. We reinforce our values through the following actions: By what we do, especially what the leadership does. By what we select for during hiring. By what we emphasize during on-boarding. By what criteria we use for promotions By what criteria we use for bonuses. By what behavior we compliment. By what criteria we use to let people go.","title":"How do we reinforce our values"},{"location":"en/general/values/#permission-to-play","text":"From our values we excluded some behaviors that are obvious, we call them our permission to play behavior: Be truthful and honest. Be dependable, reliable, fair, and respectful. Be committed, creative, inspiring, and passionate. Be deserving of the trust of our users and customers. Act in the best interest of the company, our team members, our customers, users, and investors. Act in accordance with the law.","title":"Permission to play"}]}